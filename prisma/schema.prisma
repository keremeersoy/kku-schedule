generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String?
  password                 String?
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  surname       String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  created_at    DateTime? @default(now())
  faculties     Faculty[] @relation("UserFaculties")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Faculty {
  id        String        @id @default(uuid())
  name      String
  userId    String
  createdBy User          @relation("UserFaculties", fields: [userId], references: [id])
  createdAt DateTime      @default(now())
  departments Department[]
  examSchedules ExamSchedule[]
}

model Department {
  id         String     @id @default(uuid())
  name       String
  facultyId  String
  faculty    Faculty    @relation(fields: [facultyId], references: [id])
  courses    Course[]
  createdAt  DateTime   @default(now())
}

model ExamSchedule {
  id                        String     @id @default(uuid())
  facultyId                 String
  title                     String
  start_date                DateTime
  end_date                  DateTime
  assistant_count           Int
  max_classes_per_assistant Int
  created_at                DateTime   @default(now())
  faculty                   Faculty    @relation(fields: [facultyId], references: [id])
  courses                   Course[]
  classrooms                Classroom[]
  examGroups                ExamGroup[]
}

model Course {
  id               String        @id @default(uuid())
  name             String
  student_count    Int
  exam_duration    Int
  departmentId     String
  examScheduleId   String
  department       Department    @relation(fields: [departmentId], references: [id])
  examSchedule     ExamSchedule  @relation(fields: [examScheduleId], references: [id])
  examGroups       ExamGroup[]
}

model Classroom {
  id               String        @id @default(uuid())
  name             String
  capacity         Int
  examScheduleId   String
  examSchedule     ExamSchedule  @relation(fields: [examScheduleId], references: [id])
  examRooms        ExamClassroom[]
}

model ExamGroup {
  id               String        @id @default(uuid())
  courseId         String
  examScheduleId   String
  exam_date        DateTime
  start_time       DateTime
  end_time         DateTime
  course           Course        @relation(fields: [courseId], references: [id])
  examSchedule     ExamSchedule  @relation(fields: [examScheduleId], references: [id])
  examRooms        ExamClassroom[]
}

model ExamClassroom {
  id             String       @id @default(uuid())
  examGroupId    String
  classroomId    String
  examGroup      ExamGroup    @relation(fields: [examGroupId], references: [id])
  classroom      Classroom    @relation(fields: [classroomId], references: [id])
}
